// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  lastaname     String?
  email         String?   @unique
  phone         String?   @unique
  verified      Boolean   @default(false)
  emailVerified DateTime? @map("email_verified")
  avatar        String?
  background    String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  favoriteIds   String[]  @map("favorite_ids") @db.ObjectId

  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]
  // rolesss
  role         Role?         @relation(fields: [roleId], references: [id])
  roleId       String?       @map("role_id") @db.ObjectId
}

model Role {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      RoleName
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoleName {
  USER
  ADMIN
  SUPERADMIN
  ALMEYDA
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String? @map("scope")
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  images        ImagePost[]
  category      String
  guestCount    Int         @map("guest_count")
  locationValue String      @map("location_value")
  userId        String      @map("user_id") @db.ObjectId
  price         Float

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model ImagePost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Listing   Listing? @relation(fields: [listingId], references: [id])
  listingId String?  @db.ObjectId
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @map("user_id") @db.ObjectId
  listingId  String   @map("listing_id") @db.ObjectId
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")
  totalPrice Float    @map("total_price")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
